<html>
  <head>
    <title>SSH Terminal</title>
    <meta charset="utf-8">

    <!-- <link rel="stylesheet" href="xterm/dist/xterm.css"/> -->
    <!-- <script src="xterm/dist/xterm.js"></script> -->
    <!-- <script src="xterm/dist/addons/fit/fit.js"></script> -->
    <!-- <script src="jquery/jquery-1.12.4.min.js"></script> -->
    <!-- <script src="socketio/socket.io-1.7.3.js"></script> -->

    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/xterm/3.14.5/xterm.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xterm/3.14.5/xterm.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xterm/3.14.5/addons/fit/fit.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js"></script>
    
    <script>
      function terminal() {

        const terminalContainer = document.getElementById("terminal-container");
        const term = new Terminal({ cursorBlink: true });
        window.term = term;
        term.open(terminalContainer, { focus: false, });
        fit.fit(term);

        let prevConnection = null;

        const sshConnectionParamsForm = document.getElementById('ssh-connection-params');
        const command = sshConnectionParamsForm.command.value;
        const password = sshConnectionParamsForm.password.value;
        sshConnectionParamsForm.password.focus();

        sshConnectionParamsForm.addEventListener('submit', (e) => {
          e.preventDefault();
          e.stopPropagation();

          if (prevConnection) {
            prevConnection.disconnect();
            prevConnection = null;
          }

          const command = e.target.command.value;
          const password = e.target.password.value;


          const hostLoginRegexp = /ssh\s+((\w+)\@)?([0-9a-zA-Z\.\-\_]+)(\:(\d+))?/gm;
          const loginRegexp = /ssh\s+((\w+)\@)?([0-9a-zA-Z\.\-\_]+)(\:(\d+))?.*(-l\s+(\w+))/gm;
          const portRegexp = /ssh\s+((\w+)\@)?([0-9a-zA-Z\.\-\_]+)(\:(\d+))?.*(-p\s+(\d+))?/gm
          const identityRegexp = /ssh\s+((\w+)\@)?([0-9a-zA-Z\.\-\_]+)(\:(\d+))?.*(-i\s+([a-zA-Z0-9_\-\/\.\~]+))/gm

          const r = hostLoginRegexp.exec(command);
          const r2 = portRegexp.exec(command);
          const r3 = identityRegexp.exec(command);
          const r4 = loginRegexp.exec(command);
          if (!r) {
            term.write(`\r\n*** wrong command ***\r\n`);
            return;
          }

          const login = r4 && r4[7] || r[2];
          if (!login) {
            term.write(`\r\n*** login (username) required***\r\n`);
            return;
          }

          const host = r[3];
          const port = r2[7] || r[5] || 22;
          const identity = r3 && r3[7] || null;

          const connectionParams = {
            login,
            host,
            port,
            privateKey: identity,
            password: !identity ? password : '',
            passphrase: identity ? password : '',
          };
          const query = Object.keys(connectionParams).map(k => `${k}=${connectionParams[k] ? connectionParams[k] : ''}`).join('&');

          const socket = io.connect(undefined, { query: query });
          prevConnection = socket;
          socket.on("connect", function() {
            term.write("\r\n*** Connected to backend***\r\n");
            term.focus();

            // Browser -> Backend
            term.on("data", function(data) {
              //console.log(data);
              //                        alert("Not allowd to write. Please don't remove this alert without permission of Ankit or Samir sir. It will be a problem for server'");
              socket.emit("data", data);
            });

            // Backend -> Browser
            socket.on("data", function(data) {
              term.write(data);
            });

            socket.on("disconnect", function() {
              term.write("\r\n*** Disconnected from backend***\r\n");
            });
          });
        });
      }

      window.addEventListener("load", terminal, false);
    </script>
    <style>
      body {
        font-family: helvetica, sans-serif, arial;
        font-size: 1em;
        color: #111;
      }

      h1 {
        text-align: center;
      }

      #terminal-container {
        width: 100%;
        height: 600px;
        display: inline-block;
        padding: 2px;
      }

      .function {
        display: inline-block;
        float: right;
      }

      #terminal-container .terminal {
        background-color: #111;
        color: #fafafa;
        padding: 2px;
      }

      #terminal-container .terminal:focus .terminal-cursor {
        background-color: #fafafa;
      }

      #ssh-connection-params {
        display: flex;
        flex-direction: column;
      }
      #ssh-connection-params input[name="command"] {
        
      }
      #ssh-connection-params input[name="password"] {
        
      }
      #ssh-connection-params input[type="submit"] {    
        background-color: lightgray;
      }

    </style>
  </head>

  <body>
    <form id="ssh-connection-params">
      <input name="command" type="text" value='ssh abd@localhost -p 22 -i ~/.ssh/id_rsa' placeholder="ssh user@host -p PORT ...">
      <input name="password" type="password" value='' placeholder="Password (or private key passphrase)">
      <input type="submit" value="Connect">
    </form>
    <div id="terminal-container"></div>
  </body>
</html>
